// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// getneighbor_weightmat
arma::sp_mat getneighbor_weightmat(const arma::mat x, const double& radius, const double& width);
RcppExport SEXP _SpaCOAP_getneighbor_weightmat(SEXP xSEXP, SEXP radiusSEXP, SEXP widthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type radius(radiusSEXP);
    Rcpp::traits::input_parameter< const double& >::type width(widthSEXP);
    rcpp_result_gen = Rcpp::wrap(getneighbor_weightmat(x, radius, width));
    return rcpp_result_gen;
END_RCPP
}
// spacoap_cpp
Rcpp::List spacoap_cpp(const arma::mat& X_count, const arma::vec& a, const arma::mat& Z, const arma::mat& H, const arma::sp_mat& Adj_sp, const int& rank_use, const arma::mat& Mu_y_int, const arma::mat& S_y_int, const arma::vec& invLambda_int, const arma::mat& B_int, const arma::mat& alpha_int, const arma::mat& bbeta_int, const arma::mat& M_int, const arma::mat& S_int, const double& epsELBO, const int& maxIter, const bool& verbose, const bool& up_eta, const arma::vec& w_plus_vec, const double& wt_sq_sum, const int& algo, const bool& fast_svd, const bool& add_IC_inter);
RcppExport SEXP _SpaCOAP_spacoap_cpp(SEXP X_countSEXP, SEXP aSEXP, SEXP ZSEXP, SEXP HSEXP, SEXP Adj_spSEXP, SEXP rank_useSEXP, SEXP Mu_y_intSEXP, SEXP S_y_intSEXP, SEXP invLambda_intSEXP, SEXP B_intSEXP, SEXP alpha_intSEXP, SEXP bbeta_intSEXP, SEXP M_intSEXP, SEXP S_intSEXP, SEXP epsELBOSEXP, SEXP maxIterSEXP, SEXP verboseSEXP, SEXP up_etaSEXP, SEXP w_plus_vecSEXP, SEXP wt_sq_sumSEXP, SEXP algoSEXP, SEXP fast_svdSEXP, SEXP add_IC_interSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X_count(X_countSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type H(HSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type Adj_sp(Adj_spSEXP);
    Rcpp::traits::input_parameter< const int& >::type rank_use(rank_useSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Mu_y_int(Mu_y_intSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type S_y_int(S_y_intSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type invLambda_int(invLambda_intSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B_int(B_intSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type alpha_int(alpha_intSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type bbeta_int(bbeta_intSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type M_int(M_intSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type S_int(S_intSEXP);
    Rcpp::traits::input_parameter< const double& >::type epsELBO(epsELBOSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxIter(maxIterSEXP);
    Rcpp::traits::input_parameter< const bool& >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const bool& >::type up_eta(up_etaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w_plus_vec(w_plus_vecSEXP);
    Rcpp::traits::input_parameter< const double& >::type wt_sq_sum(wt_sq_sumSEXP);
    Rcpp::traits::input_parameter< const int& >::type algo(algoSEXP);
    Rcpp::traits::input_parameter< const bool& >::type fast_svd(fast_svdSEXP);
    Rcpp::traits::input_parameter< const bool& >::type add_IC_inter(add_IC_interSEXP);
    rcpp_result_gen = Rcpp::wrap(spacoap_cpp(X_count, a, Z, H, Adj_sp, rank_use, Mu_y_int, S_y_int, invLambda_int, B_int, alpha_int, bbeta_int, M_int, S_int, epsELBO, maxIter, verbose, up_eta, w_plus_vec, wt_sq_sum, algo, fast_svd, add_IC_inter));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SpaCOAP_getneighbor_weightmat", (DL_FUNC) &_SpaCOAP_getneighbor_weightmat, 3},
    {"_SpaCOAP_spacoap_cpp", (DL_FUNC) &_SpaCOAP_spacoap_cpp, 23},
    {NULL, NULL, 0}
};

RcppExport void R_init_SpaCOAP(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
